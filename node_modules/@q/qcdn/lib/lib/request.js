'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Request = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

exports.get = get;
exports.post = post;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _url = require('url');

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _bufferhelper = require('bufferhelper');

var _bufferhelper2 = _interopRequireDefault(_bufferhelper);

var _tools = require('./tools');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Request = function () {

    /**
     * 请求头
     * @type {object}
     * @private
     */


    /**
     * 请求方式
     * @type {string}
     * @private
     */

    function Request(url) {
        (0, _classCallCheck3.default)(this, Request);
        this._url = '';
        this._method = 'get';
        this._data = null;
        this._headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.137 Safari/537.36'
        };
        this._options = {
            timeout: 60 * 1000
        };

        //url = 'http://tmp.jedm.cn/_request.php';
        this._url = url;
        return this;
    }

    /**
     * 设置请求方法
     * @param method {string}
     * @returns {Request}
     */


    /**
     * 配置项
     * @type {object}
     * @private
     */


    /**
     * 数据
     * @type {null|object}
     * @private
     */


    /**
     * 请求链接
     * @type {string}
     * @private
     */


    (0, _createClass3.default)(Request, [{
        key: 'method',
        value: function method(_method) {
            _method = _method.toLowerCase();
            if (!(0, _tools.includes)(['get', 'post', 'put', 'delete'], _method)) {
                _method = 'get';
            }
            this._method = _method;
            return this;
        }

        /**
         * 设置附加参数
         * @param key {string}
         * @param value {*}
         * @returns {Request}
         */

    }, {
        key: 'options',
        value: function options(key, value) {
            if ((typeof key === 'undefined' ? 'undefined' : (0, _typeof3.default)(key)) == 'object') {
                (0, _assign2.default)(this._options, key);
            } else {
                this._options[key] = value;
            }
            return this;
        }

        /**
         * 设置数据
         * @param data {*}
         * @return {Request}
         */

    }, {
        key: 'data',
        value: function data(_data) {
            this._data = _data;
            return this;
        }

        /**
         * 设置请求头
         * @param key {string}
         * @param value {*}
         * @returns {Request}
         */

    }, {
        key: 'header',
        value: function header(key, value) {
            if ((typeof key === 'undefined' ? 'undefined' : (0, _typeof3.default)(key)) == 'object') {
                (0, _assign2.default)(this._headers, key);
            } else {
                this._headers[key] = value;
            }
            return this;
        }

        /**
         * 发送请求
         * @returns {Promise}
         */

    }, {
        key: 'send',
        value: function send() {
            var _this = this;

            var url = this._url;
            var isHttps = this._url.startsWith('https');

            var data = this._data;

            // 处理数据
            if (data && !this._options.raw) {
                (0, _keys2.default)(data).forEach(function (key) {
                    var value = data[key];

                    if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) == 'object') {
                        data[key] = (0, _stringify2.default)(value);
                    }
                });
                data = _querystring2.default.encode(data);
            }

            // 处理链接和请求头
            if ((0, _tools.includes)(['get', 'delete'], this._method)) {
                url += ((0, _tools.includes)(url, '?') ? '&' : '?') + data;
            } else {
                if (data) {
                    this.header('Content-Length', data.length);
                }

                if (!this._options.raw) {
                    this.header('Content-Type', 'application/x-www-form-urlencoded');
                }
            }

            var urlInfo = (0, _url.parse)(url);

            var options = {
                hostname: urlInfo.hostname,
                port: urlInfo.port,
                path: urlInfo.path,
                headers: this._headers,
                method: this._method
            };

            return new _promise2.default(function (resolve, reject) {
                var bufferHelper = new _bufferhelper2.default();

                var request = (isHttps ? _https2.default : _http2.default).request(options, function (response) {

                    if (response.statusCode != 200) {
                        reject(new Error('(' + response.statusCode + ') ' + response.statusMessage));
                    }

                    response.on('data', function (chunk) {
                        bufferHelper.concat(chunk);
                    });

                    response.on('end', function () {
                        var contentType = response.headers['content-type'] || 'text/plain';
                        var result = bufferHelper.toBuffer();
                        if (contentType.match(/^text|javascript|json/) && !_this._options.plain) {
                            result = result.toString();
                            try {
                                result = JSON.parse(result);
                            } catch (e) {}
                        }
                        resolve(result);
                    });
                });

                request.on('error', function (error) {
                    reject(new Error(error.message));
                });

                // 超时处理
                request.setTimeout(_this._options.timeout, function () {
                    reject(new Error('Request Time Out'));
                });

                if ((0, _tools.includes)(['post', 'put'], _this._method) && data) {
                    request.write(data);
                }

                request.end();
            });
        }
    }]);
    return Request;
}(); /**
      * @fileOverview 错误类
      * @author 孟之杰(mengzhijie@360.cn)
      * @version 3.0.0
      */

exports.Request = Request;
function get(url, opts) {
    return new Request(url).options(opts).method('get').send();
}

/**
 *
 * @param url {string}
 * @param data {object}
 * @param opts {object}
 * @returns {Promise|Request}
 */
function post(url, data, opts) {
    return new Request(url).options(opts).method('post').data(data).send();
}