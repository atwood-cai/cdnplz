'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

exports.upload = upload;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _xml2js = require('xml2js');

var _request = require('./request');

var request = _interopRequireWildcard(_request);

var _QcdnError = require('./QcdnError');

var _QcdnError2 = _interopRequireDefault(_QcdnError);

var _tools = require('./tools');

var _config = require('../../config.json');

var _config2 = _interopRequireDefault(_config);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @fileOverview Cassandra上传工具
 * @author 孟之杰(mengzhijie@360.cn)
 * @version 3.0.0
 */

var Cassandra = function () {
    function Cassandra(opts) {
        (0, _classCallCheck3.default)(this, Cassandra);

        this.config = (0, _assign2.default)(_config2.default.cassandra, opts);

        if (!this.config.api || !this.config.key || !this.config.baseUrl) {
            throw new _QcdnError2.default(0x301, 'Cassandra配置有误', { config: this.config });
        }
    }

    /**
     * 上传文件
     *
     * @param version {string}
     * @param fp {string}
     * @return {Promise}
     */


    (0, _createClass3.default)(Cassandra, [{
        key: 'upload',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(version, fp) {
                var signature, data, url, content, response;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                signature = this.genSignature(version);
                                data = _fs2.default.readFileSync(fp, 'base64');
                                url = this.buildUrl(version, signature);
                                content = Cassandra.buildContent(signature, data);
                                _context.next = 6;
                                return request.post(url, content, { raw: true });

                            case 6:
                                response = _context.sent;
                                return _context.abrupt('return', new _promise2.default(function (resolve, reject) {
                                    (0, _xml2js.parseString)(response, { explicitArray: false }, function (error, result) {
                                        if (error) {
                                            reject(new _QcdnError2.default(0x322, 'Cassandra响应解析错误', {
                                                fp: fp,
                                                response: response
                                            }));
                                        } else if (result.retcode != 0) {
                                            reject(new _QcdnError2.default(0x321, 'Cassandra返回错误: ${message}', {
                                                fp: fp,
                                                message: result.msg
                                            }));
                                        } else {
                                            resolve(version);
                                        }
                                    });
                                }));

                            case 8:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function upload(_x, _x2) {
                return _ref.apply(this, arguments);
            }

            return upload;
        }()

        /**
         * 生成签名
         *
         * @param version {string}
         * @returns {string}
         */

    }, {
        key: 'genSignature',
        value: function genSignature(version) {
            return (0, _tools.md5)(this.config.baseUrl + this.config.key + version);
        }

        /**
         * 构建提交url
         *
         * @param version {string}
         * @param signature {string}
         * @returns {string}
         */

    }, {
        key: 'buildUrl',
        value: function buildUrl(version, signature) {
            var query = _querystring2.default.encode({
                sign: signature,
                version: version,
                key: this.config.key,
                namespace: this.config.baseUrl
            });
            return this.config.api + '?' + query;
        }

        /**
         * 构建提交内容
         *
         * @param signature {string}
         * @param content {string}
         * @returns {XML}
         */

    }], [{
        key: 'buildContent',
        value: function buildContent(signature, content) {
            return '\n<?xml version="1.0"?>\n<data>\n  <key>' + signature + '</key>\n  <value><![CDATA[' + (0, _tools.urlencode)(content) + ']]></value>\n</data>';
        }
    }]);
    return Cassandra;
}();

/**
 * 上传文件
 *
 * @param version {string}
 * @param fp {string}
 * @param config {object}
 * @returns {Promise}
 */


function upload(version, fp) {
    var config = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    return new Cassandra(config).upload(version, fp);
}