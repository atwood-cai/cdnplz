'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hashfp = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

/**
 * 生成文件夹哈希
 *
 * @param fp {string|array}
 * @returns {string}
 */

var hashfp = exports.hashfp = function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(fp) {
        var md5List, isArray, result, _result, text;

        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        md5List = void 0;
                        isArray = Array.isArray(fp);

                        if (!(process.platform == 'win32')) {
                            _context.next = 6;
                            break;
                        }

                        throw new _QcdnError2.default(0x4, 'Windows环境下不支持“保持文件名”');

                    case 6:
                        if (!(process.platform == 'darwin')) {
                            _context.next = 20;
                            break;
                        }

                        if (!isArray) {
                            _context.next = 13;
                            break;
                        }

                        _context.next = 10;
                        return exec('md5 %s', fp.map(function (fp) {
                            return '"' + fp + '"';
                        }).join(' '));

                    case 10:
                        _context.t0 = _context.sent;
                        _context.next = 16;
                        break;

                    case 13:
                        _context.next = 15;
                        return exec('find "%s" -type f -print0 | xargs -0 md5', fp);

                    case 15:
                        _context.t0 = _context.sent;

                    case 16:
                        result = _context.t0;

                        md5List = result.trim().split('\n').map(function (line) {
                            return line.substr(-32);
                        });

                        _context.next = 31;
                        break;

                    case 20:
                        if (!isArray) {
                            _context.next = 26;
                            break;
                        }

                        _context.next = 23;
                        return exec('md5sum %s', fp.map(function (fp) {
                            return '"' + fp + '"';
                        }).join(' '));

                    case 23:
                        _context.t1 = _context.sent;
                        _context.next = 29;
                        break;

                    case 26:
                        _context.next = 28;
                        return exec('find "%s" -type f -print0 | xargs -0  md5sum', fp);

                    case 28:
                        _context.t1 = _context.sent;

                    case 29:
                        _result = _context.t1;

                        md5List = _result.trim().split('\n').map(function (line) {
                            return line.substr(0, 32);
                        });

                    case 31:

                        // 把全部md5排序后合并
                        text = md5List.sort().join('');

                        // 用合并后的值重新计算md5,并截取中间8位

                        return _context.abrupt('return', md5(text).substr(8, 8));

                    case 33:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function hashfp(_x) {
        return _ref.apply(this, arguments);
    };
}();

/**
 * 运行命令
 *
 * @param command {string} 命令
 * @param args {...} 命令中要替换的参数
 * @returns {Promise}
 */


exports.rawurlencode = rawurlencode;
exports.urlencode = urlencode;
exports.md5 = md5;
exports.extname = extname;
exports.exec = exec;
exports.array2object = array2object;
exports.buildObject = buildObject;
exports.includes = includes;

var _util = require('util');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _QcdnError = require('./QcdnError');

var _QcdnError2 = _interopRequireDefault(_QcdnError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hexChars = '0123456789ABCDEFG'.split('');

/**
 * 模拟php rawurlencode函数
 * @param str {string}
 * @returns {string}
 */
/**
 * @fileOverview 辅助工具
 * @author 孟之杰(mengzhijie@360.cn)
 * @version 3.0.0
 */

function rawurlencode(str) {
    var code = void 0;
    var result = '';
    for (var i = 0, x = 0, y = 0; i < str.length; i++, x++, y++) {
        code = str.charCodeAt(i);

        if (code < 48 /*0*/ && code != 45 /*-*/ && code != 46 /*.*/ || code < 65 /*A*/ && code > 57 /*9*/ || code > 90 /*Z*/ && code < 97 /*a*/ && code != 95 /*_*/ || code > 122 /*z*/ && code != 126 /*~*/) {
            result += '%' + hexChars[code >> 4] + hexChars[code & 15];
        } else {
            result += str.charAt(i);
        }
    }

    return result;
}

/**
 * 模拟php urlencode函数
 * @param str {string}
 * @returns {string}
 */
function urlencode(str) {

    var code = void 0;
    var result = '';
    for (var i = 0; i < str.length; i++) {
        code = str.charCodeAt(i);

        if (code == 32 /* */) {
                result += '+';
            } else if (code < 48 /*0*/ && code != 45 /*-*/ && code != 46 /*.*/ || code < 65 /*A*/ && code > 57 /*9*/ || code > 90 /*Z*/ && code < 97 /*a*/ && code != 95 /*_*/ || code > 122 /*z*/) {
            result += '%' + hexChars[code >> 4] + hexChars[code & 15];
        } else {
            result += str.charAt(i);
        }
    }

    return result;
}

/**
 * 计算字符串md5
 * @param str {string}
 * @returns {string}
 */
function md5(str) {
    return _crypto2.default.createHash('md5').update(str).digest('hex');
}

/**
 * 获取文件扩展名
 * @param fp {string}
 * @returns {string}
 */
function extname(fp) {
    return _path2.default.extname(fp).substr(1).toLowerCase();
}function exec(command) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }

    var options = args.pop();

    if (options && (typeof options === 'undefined' ? 'undefined' : (0, _typeof3.default)(options)) !== 'object') {
        args.push(options);
        options = {};
    }

    command = _util.format.apply(undefined, [command].concat(args));

    return new _promise2.default(function (resolve, reject) {
        _child_process2.default.exec(command, options, function (error, stdout, stderr) {
            if (error || stderr) {
                reject(stderr.trim() || error);
            } else {
                resolve(stdout.trim());
            }
        });
    });
}

/**
 * 对象数组合并成大的对象
 *
 * @param list {object[]}
 * @returns {object}
 */
function array2object(list) {
    return _assign2.default.apply(Object, [{}].concat((0, _toConsumableArray3.default)(list)));
}

/**
 * 生成object
 *
 * @param key {string}
 * @param value {*}
 * @returns {object}
 */
function buildObject(key, value) {
    var obj = {};
    obj[key] = value;
    return obj;
}

/**
 * 是否包含
 *
 * @param haystack {array|string}
 * @param needle {*}
 * @returns {boolean}
 */
function includes(haystack, needle) {
    if (haystack && haystack.includes) {
        return haystack.includes(needle);
    } else if (haystack && haystack.indexOf) {
        return haystack.indexOf(needle) >= 0;
    } else {
        return false;
    }
}