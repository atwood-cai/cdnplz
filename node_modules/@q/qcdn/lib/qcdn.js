'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.min = exports.Qcdn = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

exports.upload = upload;
exports.content = content;

var _min = require('./lib/min');

Object.defineProperty(exports, 'min', {
    enumerable: true,
    get: function get() {
        return _interopRequireDefault(_min).default;
    }
});

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _tools = require('./lib/tools');

var _QcdnError = require('./lib/QcdnError');

var _QcdnError2 = _interopRequireDefault(_QcdnError);

var _image = require('./uploader/image');

var _image2 = _interopRequireDefault(_image);

var _static = require('./uploader/static');

var _static2 = _interopRequireDefault(_static);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Qcdn = exports.Qcdn = function () {
    function Qcdn() {
        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
        (0, _classCallCheck3.default)(this, Qcdn);

        // 深克隆config
        this.config = JSON.parse((0, _stringify2.default)(_config2.default));

        // 混入自定义参数
        (0, _assign2.default)(this.config, opts);

        // 将自定义参数复制到image和static中
        (0, _assign2.default)(this.config.image, opts, opts.image);
        (0, _assign2.default)(this.config.static, opts, opts.static);
    }

    /**
     * 上传入口
     *
     * @param fp {string|array}
     * @returns {object}
     */


    (0, _createClass3.default)(Qcdn, [{
        key: 'upload',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(fp) {
                var config, result, _ret;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                config = this.config;
                                result = void 0;

                                if (!Array.isArray(fp)) {
                                    _context.next = 8;
                                    break;
                                }

                                _context.next = 5;
                                return this.uploadList(fp);

                            case 5:
                                result = _context.sent;
                                _context.next = 11;
                                break;

                            case 8:
                                _context.next = 10;
                                return this.uploadSingle(fp);

                            case 10:
                                result = _context.sent;

                            case 11:

                                // 当未设置original参数时，把结果中的error对象转化为错误字符串
                                if (!config.original) {
                                    (0, _keys2.default)(result).forEach(function (key) {
                                        return result[key] = result[key].toString();
                                    });
                                }

                                if (!(config.single && result[fp])) {
                                    _context.next = 16;
                                    break;
                                }

                                return _context.abrupt('return', result[fp]);

                            case 16:
                                if (!config.directory) {
                                    _context.next = 22;
                                    break;
                                }

                                _ret = function () {
                                    // 修改路径为相对路径
                                    var newResult = {};

                                    (0, _keys2.default)(result).forEach(function (key) {
                                        var newKey = _path2.default.relative(config.directory, key);
                                        var item = result[key];
                                        if (item instanceof Error) {
                                            item.message = item.message.replace(key, newKey);
                                            item.args.fp && (item.args.fp = newKey);
                                        } else {
                                            item = item.replace(key, newKey);
                                        }
                                        newResult[newKey] = item;
                                    });

                                    return {
                                        v: newResult
                                    };
                                }();

                                if (!((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object")) {
                                    _context.next = 20;
                                    break;
                                }

                                return _context.abrupt('return', _ret.v);

                            case 20:
                                _context.next = 23;
                                break;

                            case 22:
                                return _context.abrupt('return', result);

                            case 23:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function upload(_x2) {
                return _ref.apply(this, arguments);
            }

            return upload;
        }()

        /**
         * 上传文件列表
         *
         * @param fps {array}
         * @returns {object}
         */

    }, {
        key: 'uploadList',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(fps) {
                var _this = this;

                var dirOptions, dir, result;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                dirOptions = void 0;
                                dir = _path2.default.dirname(fps[0]);

                                if (!(this.config.keepName && fps.every(function (fp) {
                                    return dir == _path2.default.dirname(fp);
                                }))) {
                                    _context2.next = 8;
                                    break;
                                }

                                _context2.next = 5;
                                return (0, _tools.hashfp)(fps);

                            case 5:
                                _context2.t0 = _context2.sent;
                                _context2.t1 = dir;
                                dirOptions = {
                                    dirHash: _context2.t0,
                                    base: _context2.t1
                                };

                            case 8:
                                _context2.next = 10;
                                return _promise2.default.all(fps.map(function (fp) {
                                    return _this.uploadSingle(fp, dirOptions);
                                }));

                            case 10:
                                result = _context2.sent;
                                return _context2.abrupt('return', result.reduce(function (result, item) {
                                    return (0, _assign2.default)(result, item);
                                }, {}));

                            case 12:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function uploadList(_x3) {
                return _ref2.apply(this, arguments);
            }

            return uploadList;
        }()

        /**
         * 上传文件或文件夹
         *
         * @param fp {string}
         * @param [dirOptions] {object}
         * @returns {object}
         */

    }, {
        key: 'uploadSingle',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(fp, dirOptions) {
                var config, error, basePath, result, fileList, imageUploader, imageResult, staticUploader, staticResult;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                config = this.config;

                                // 检查文件可读性

                                _context3.prev = 1;

                                _fs2.default.accessSync(fp, _fs2.default.R_OK);
                                _context3.next = 13;
                                break;

                            case 5:
                                _context3.prev = 5;
                                _context3.t0 = _context3['catch'](1);
                                error = new _QcdnError2.default(0x1, '文件不存在或不可读: ${fp}', { fp: fp });

                                if (!config.force) {
                                    _context3.next = 12;
                                    break;
                                }

                                return _context3.abrupt('return', (0, _tools.buildObject)(fp, error));

                            case 12:
                                throw error;

                            case 13:
                                if (!(config.keepName && !dirOptions)) {
                                    _context3.next = 20;
                                    break;
                                }

                                basePath = _fs2.default.statSync(fp).isFile() ? _path2.default.dirname(fp) : fp;
                                _context3.next = 17;
                                return (0, _tools.hashfp)(fp);

                            case 17:
                                _context3.t1 = _context3.sent;
                                _context3.t2 = basePath;
                                dirOptions = {
                                    dirHash: _context3.t1,
                                    base: _context3.t2
                                };

                            case 20:
                                result = {};

                                // 解析文件列表

                                fileList = this.parsePath(fp);

                                // 检查文件类型

                                fileList.forEach(function (fp) {
                                    var ext = (0, _tools.extname)(fp);
                                    var isStatic = (0, _tools.includes)(config.static.exts, ext);
                                    var isImage = (0, _tools.includes)(config.image.exts, ext);

                                    if (!isStatic && !isImage) {
                                        var _error = new _QcdnError2.default(0x3, '不支持该文件类型: ${fp}', { fp: fp });
                                        if (config.force) {
                                            result[fp] = _error;
                                        } else {
                                            throw _error;
                                        }
                                    }
                                });

                                imageUploader = new _image2.default(config.image);
                                _context3.next = 26;
                                return imageUploader.upload(fileList, dirOptions);

                            case 26:
                                imageResult = _context3.sent;
                                staticUploader = new _static2.default(config.static);
                                // 图片上传结果传入staticUploader中,便于css中引用

                                staticUploader.setReplaceMap(imageResult);
                                _context3.next = 31;
                                return staticUploader.upload(fileList, dirOptions);

                            case 31:
                                staticResult = _context3.sent;
                                return _context3.abrupt('return', (0, _assign2.default)(result, imageResult, staticResult));

                            case 33:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this, [[1, 5]]);
            }));

            function uploadSingle(_x4, _x5) {
                return _ref3.apply(this, arguments);
            }

            return uploadSingle;
        }()

        /**
         * 将目录解析为文件列表
         *
         * @param fp {string}
         * @returns []
         */

    }, {
        key: 'parsePath',
        value: function parsePath(fp) {
            var _this2 = this;

            var basename = _path2.default.basename(fp);

            // 忽略隐藏文件\文件夹
            if (basename.startsWith('.') && !this.config.all) {
                return [];
            }

            if (_fs2.default.statSync(fp).isFile()) {
                return [fp];
            } else {
                return _fs2.default.readdirSync(fp).reduce(function (sum, fn) {
                    var result = _this2.parsePath(_path2.default.join(fp, fn));
                    return sum.concat(result);
                }, []);
            }
        }
    }]);
    return Qcdn;
}();

/**
 * 上传文件/文件夹
 *
 * @param fp {string} 文件路径
 * @param config {object} 配置
 */
/**
 * @fileOverview qcdn上传工具主文件
 * @author 孟之杰(mengzhijie@360.cn)
 * @version 3.0.0
 */

function upload(fp) {
    var config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    return new Qcdn(config).upload(fp);
}

/**
 * 上传文件内容
 *
 * @param content {string} 文本内容
 * @param type {object} 格式 js/css/json等
 * @param config {object}
 */
function content(content, type) {
    var config = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    var name = (0, _tools.md5)(content) + '.' + type;
    var fp = _path2.default.join(_os2.default.tmpDir(), name);

    _fs2.default.writeFileSync(fp, content);

    (0, _assign2.default)(config, {
        single: true,
        keepName: false
    });

    return new Qcdn(config).upload(fp).then(function (result) {
        _fs2.default.unlinkSync(fp);
        return result;
    }, function (error) {
        _fs2.default.unlinkSync(fp);
        throw error;
    });
}

/**
 * 压缩
 */
exports.default = upload;
