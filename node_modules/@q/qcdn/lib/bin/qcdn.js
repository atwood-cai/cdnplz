#!/usr/bin/env node
'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _qcdn = require('../qcdn');

var qcdn = _interopRequireWildcard(_qcdn);

var _package = require('../../package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @fileOverview 执行文件
 * @author 孟之杰(mengzhijie@360.cn)
 * @version 3.0.0
 */

var isWin = process.platform == 'win32';

var c = _commander2.default.version(_package2.default.version, '-v, --version').usage('[options] 文件/文件夹路径 [文件/文件夹路径...]\n         qcdn -t <文件类型> 文件内容\n         qcdn -m 文件路径').option('-s, --https', '使用https链接').option('-a, --all', '上传全部文件,包含隐藏文件').option('-f, --force', '出错时不终止任务');

if (!isWin) {
    c.option('-k, --keep', '链接中包含原始文件名');
}

c.option('-d, --directory', '相对于该目录展示文件路径').option('-c, --content', '文本内容').option('-t, --type <type>', '文件类型').option('-m, --min', '压缩文件').on('--help', function () {
    var examples = '  Examples:\n\n    $ qcdn jquery.js\n    $ qcdn -k jquery.js\n    $ qcdn -s bootstrap.js bootstrap.css\n    $ qcdn -af bootstrap\n    $ qcdn -t js -c "alert(\'hello world!\');"\n    $ qcdn -m jquery.js\n    $ qcdn -m -c "alert(\'hello world!\');"\n    $ cat jquery.js | qcdn -t js\n    $ cat jquery.js | qcdn -m';

    if (isWin) {
        examples = examples.replace(/^\s+\$ qcdn -[a-z]*k[a-z]* .*\r?\n/mgi, '');
    }

    console.log(examples);
    process.exit();
}).parse(process.argv);

if (_commander2.default.args.length == 0) {
    (function () {
        var timer = setTimeout(showHelp, 300);

        // 接收管道参数
        process.stdin.resume();
        process.stdin.setEncoding('utf8');
        process.stdin.on('data', function (data) {
            clearTimeout(timer);
            _commander2.default.content = true;
            run([data]);
        });
    })();
} else {
    run(_commander2.default.args);
}

function showHelp() {
    _commander2.default.outputHelp();
}

function run(args) {
    if (_commander2.default.min) {
        if (_commander2.default.content) {
            minContent(args[0]);
        } else {
            minFile(args);
        }
    } else if (!!_commander2.default.type ^ _commander2.default.content) {
        console.log('文件类型有误');
        showHelp();
    } else {
        if (_commander2.default.content) {
            uploadContent(args[0]);
        } else {
            uploadFile(args);
        }
    }
}

/**
 * 根据路径压缩
 * @param fps {string[]}
 */
function minFile(fps) {
    fps.forEach(function (fp) {
        var result = void 0;
        try {
            var code = _fs2.default.readFileSync(fp, 'utf-8');
            result = qcdn.min(code);
        } catch (e) {
            result = _chalk2.default.red(e);
        }

        console.log(fps.length == 1 ? result : _chalk2.default.green(fp) + ':\n' + result + '\n');
    });
}

/**
 * 根据内容压缩
 * @param code {string}
 */
function minContent(code) {
    try {
        var result = qcdn.min(code);
        console.log(result);
    } catch (e) {
        console.log(_chalk2.default.red(e));
    }
}

/**
 * 根据路径上传
 * @param fps {string[]}
 */
function uploadFile(fps) {
    var options = {
        https: !!_commander2.default.https,
        force: !!_commander2.default.force,
        all: !!_commander2.default.all,
        keepName: !!_commander2.default.keep,
        directory: _commander2.default.directory,
        original: true
    };

    qcdn.upload(fps, options).then(function (result) {
        var keys = (0, _keys2.default)(result);

        keys.forEach(function (key) {
            var url = result[key];
            if (keys.length == 1) {
                console.log(url);
            } else if (url instanceof Error) {
                console.log(_chalk2.default.green(key) + ' => ' + _chalk2.default.red(url));
            } else {
                console.log(_chalk2.default.green(key) + ' => ' + url);
            }
        });
    }, function (error) {
        console.log(_chalk2.default.red(error));
    });
}

/**
 * 根据内容上传
 * @param code {string}
 */
function uploadContent(code) {
    var options = {
        https: !!_commander2.default.https
    };

    qcdn.content(code, _commander2.default.type, options).then(function (url) {
        console.log(url);
    }, function (error) {
        console.log(_chalk2.default.red(error));
    });
}