'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _parseInt = require('babel-runtime/core-js/number/parse-int');

var _parseInt2 = _interopRequireDefault(_parseInt);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _qcdn = require('../qcdn');

var _qcdn2 = _interopRequireDefault(_qcdn);

var _min = require('../lib/min');

var min = _interopRequireWildcard(_min);

var _cassandra = require('../lib/cassandra');

var cassandra = _interopRequireWildcard(_cassandra);

var _request = require('../lib/request');

var request = _interopRequireWildcard(_request);

var _QcdnError = require('../lib/QcdnError');

var _QcdnError2 = _interopRequireDefault(_QcdnError);

var _tools = require('../lib/tools');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * (                    # 第一部分,前缀
 *   (?:url\(|src=)     # css中资源以"url("开头,ie滤镜中资源以"src="开头
 *   (['"])?            # 引号可省略
 * )
 *
 * (?!data:|https?:)    # 不匹配以"data:"或"http:"或"https:"开头的链接,这些链接无需替换
 *
 * (                    # 第二部分,路径
 *   [^'"]+?\.\w+       # 不包括"?"或"#"以后的部分
 * )
 *
 * (                    # 第三部分,后缀
 *   (?:[?#].+?)?       # 匹配query或hash
 *   \2                 # 对应匹配引号
 *   (?:\)|,)           # 匹配结束的")",ie滤镜中也可能为","
 * )
 */
var urlReplaceRegex = /((?:url\(|src=)(['"])?)(?!data:|https?:)([^'"]+?\.\w+)((?:[?#].+?)?\2(?:\)|,))/g;

/**
 * @class
 */
/**
 * @fileOverview 上传静床
 * @author 孟之杰(mengzhijie@360.cn)
 * @version 3.0.0
 */

var StaticUploader = function () {

    /**
     * @constructs
     * @param config {object}
     */

    function StaticUploader(config) {
        (0, _classCallCheck3.default)(this, StaticUploader);
        this.replaceMap = {};
        this.config = {};

        this.config = config;
    }

    /**
     * 获取配置
     *
     * @param key {string}
     * @return {*}
     */


    /**
     * @var object
     * @property force {boolean}
     * @property exts {array}
     * @property https {array}
     * @property domains {array}
     */


    (0, _createClass3.default)(StaticUploader, [{
        key: 'getConfig',
        value: function getConfig(key) {
            return this.config[key];
        }

        /**
         * 修改配置
         *
         * @param key {string}
         * @param [value] {*}
         */

    }, {
        key: 'setConfig',
        value: function setConfig(key, value) {
            this.config[key] = value;
        }

        /**
         * 设置替换列表
         *
         * @param replaceMap {object}
         */

    }, {
        key: 'setReplaceMap',
        value: function setReplaceMap(replaceMap) {
            (0, _assign2.default)(this.replaceMap, replaceMap);
        }

        /**
         * 上传文件
         *
         * @param fps {string[]}
         * @param [dirOptions] {object}
         * @returns {object}
         */

    }, {
        key: 'upload',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(fps, dirOptions) {
                var _this = this;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                fps = fps.filter(function (fp) {
                                    return (0, _tools.includes)(_this.config.exts, (0, _tools.extname)(fp));
                                });

                                _context.next = 3;
                                return this.doUpload(fps, dirOptions);

                            case 3:
                                return _context.abrupt('return', _context.sent);

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function upload(_x, _x2) {
                return _ref.apply(this, arguments);
            }

            return upload;
        }()

        /**
         * 执行上传
         *
         * @param fps {string[]}
         * @param [dirOptions] {object}
         * @returns {object}
         */

    }, {
        key: 'doUpload',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(fps, dirOptions) {
                var _this2 = this;

                var resultList, promises, result1, result2;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:

                                // 排序,把css文件放到最后
                                fps.sort(function (fp) {
                                    return (0, _tools.extname)(fp) == 'css' ? 1 : -1;
                                });

                                if (!dirOptions) {
                                    _context2.next = 7;
                                    break;
                                }

                                _context2.next = 4;
                                return this.uploadToCassandra(fps, dirOptions);

                            case 4:
                                return _context2.abrupt('return', _context2.sent);

                            case 7:
                                resultList = void 0;

                                // 上传非css文件

                                promises = fps.filter(function (fp) {
                                    return (0, _tools.extname)(fp) != 'css';
                                }).map(function (fp) {
                                    return _this2.uploadToQStatic(fp);
                                });
                                _context2.next = 11;
                                return _promise2.default.all(promises);

                            case 11:
                                resultList = _context2.sent;
                                result1 = (0, _tools.array2object)(resultList);


                                this.setReplaceMap(result1);

                                // 上传css文件
                                // 为了能取得css中引用的资源文件的url,所以需等非css文件上传后再上传css文件
                                promises = fps.filter(function (fp) {
                                    return (0, _tools.extname)(fp) == 'css';
                                }).map(function (fp) {
                                    return _this2.uploadToQStatic(fp);
                                });

                                _context2.next = 17;
                                return _promise2.default.all(promises);

                            case 17:
                                resultList = _context2.sent;
                                result2 = (0, _tools.array2object)(resultList);

                                // 合并两部分结果

                                return _context2.abrupt('return', (0, _assign2.default)(result1, result2));

                            case 20:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function doUpload(_x3, _x4) {
                return _ref2.apply(this, arguments);
            }

            return doUpload;
        }()

        /**
         * 上传到静床
         *
         * @param fp {string}
         */

    }, {
        key: 'uploadToQStatic',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(fp) {
                var ext, encoding, code, data, response;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.prev = 0;
                                ext = (0, _tools.extname)(fp);

                                // 检查文件可读性

                                this.checkFileReadability(fp);

                                // 除了css和js外,其他文件使用base64编码
                                encoding = (0, _tools.includes)(['js', 'css'], ext) ? 'utf-8' : 'base64';
                                code = _fs2.default.readFileSync(fp, encoding);

                                // 上传文件大小不能大于10M,保留2%作留一点冗余

                                if (!(code.length > 10 * 1024 * 1024 * 8 * 0.98)) {
                                    _context3.next = 7;
                                    break;
                                }

                                throw new _QcdnError2.default(0x102, '文件大小不能超过7.3mb: ${fp}', {
                                    fp: fp,
                                    size: code.length
                                });

                            case 7:
                                _context3.next = 9;
                                return this.convertContent(code, fp);

                            case 9:
                                _context3.t0 = _context3.sent;
                                _context3.t1 = ext;
                                data = {
                                    code: _context3.t0,
                                    type: _context3.t1
                                };
                                response = void 0;
                                _context3.prev = 13;
                                _context3.next = 16;
                                return request.post(this.config.api + '?min=0', data);

                            case 16:
                                response = _context3.sent;
                                _context3.next = 22;
                                break;

                            case 19:
                                _context3.prev = 19;
                                _context3.t2 = _context3['catch'](13);
                                throw new _QcdnError2.default(0x111, '静床网络错误: ${message}', {
                                    fp: fp,
                                    message: _context3.t2.message
                                });

                            case 22:
                                if (!(response.errno > 0)) {
                                    _context3.next = 24;
                                    break;
                                }

                                throw new _QcdnError2.default(0x121, '静床返回错误: ${message}', {
                                    fp: fp,
                                    message: response.errmsg
                                });

                            case 24:
                                return _context3.abrupt('return', (0, _tools.buildObject)(fp, this.buildQStaticUrl(response.key, ext)));

                            case 27:
                                _context3.prev = 27;
                                _context3.t3 = _context3['catch'](0);

                                if (!this.config.force) {
                                    _context3.next = 33;
                                    break;
                                }

                                return _context3.abrupt('return', (0, _tools.buildObject)(fp, _context3.t3));

                            case 33:
                                throw _context3.t3;

                            case 34:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this, [[0, 27], [13, 19]]);
            }));

            function uploadToQStatic(_x5) {
                return _ref3.apply(this, arguments);
            }

            return uploadToQStatic;
        }()

        /**
         * 上传到cassandra
         *
         * @param fps {string[]}
         * @param dirOptions {object}
         */

    }, {
        key: 'uploadToCassandra',
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(fps, dirOptions) {
                var _this3 = this;

                var promises, processList, resultList, result, i, fp, tmpId, tmpDir, tmpFile, self, errorCount;
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                promises = [];
                                processList = [];


                                fps.forEach(function (fp) {
                                    var ext = (0, _tools.extname)(fp);
                                    if ((0, _tools.includes)(['js', 'css'], ext)) {
                                        processList.push(fp);
                                    } else {
                                        promises.push(_this3.uploadToQStatic(fp));
                                    }
                                });

                                // 上传文件到静床
                                _context5.next = 5;
                                return _promise2.default.all(promises);

                            case 5:
                                resultList = _context5.sent;
                                result = (0, _tools.array2object)(resultList);

                                // 检查文件

                                i = 0;

                            case 8:
                                if (!(i < processList.length)) {
                                    _context5.next = 26;
                                    break;
                                }

                                fp = processList[i];
                                _context5.prev = 10;

                                this.checkFileName(_path2.default.relative(dirOptions.base, fp));
                                this.checkFileReadability(fp);
                                _context5.next = 23;
                                break;

                            case 15:
                                _context5.prev = 15;
                                _context5.t0 = _context5['catch'](10);

                                if (!this.config.force) {
                                    _context5.next = 22;
                                    break;
                                }

                                result[fp] = _context5.t0;
                                processList.splice(i--, 1);
                                _context5.next = 23;
                                break;

                            case 22:
                                throw _context5.t0;

                            case 23:
                                i++;
                                _context5.next = 8;
                                break;

                            case 26:
                                if (!(processList.length == 0)) {
                                    _context5.next = 28;
                                    break;
                                }

                                return _context5.abrupt('return', result);

                            case 28:

                                // 生成域名链接
                                processList.forEach(function (fp) {
                                    if (!result[fp]) {
                                        var rp = _path2.default.relative(dirOptions.base, fp);
                                        result[fp] = _this3.buildCassandraUrl(rp, dirOptions.dirHash);
                                    }
                                });

                                // 设置替换表
                                this.setReplaceMap(result);

                                // 任务id
                                tmpId = _util2.default.format('qstatic_%s_%s', dirOptions.dirHash, Date.now());

                                // 临时文件夹

                                tmpDir = _path2.default.join(_os2.default.tmpdir(), tmpId);

                                // 打包后的临时文件

                                tmpFile = tmpDir + '.tar.gz';

                                // 清理临时文件夹

                                _context5.next = 35;
                                return (0, _tools.exec)('rm -rf "%s"', tmpDir);

                            case 35:

                                // 在async map中直接引用this有问题,可能是babel的bug
                                self = this;
                                errorCount = 0;

                                // 对文件内容进行替换后写入临时文件夹

                                promises = processList.map(function () {
                                    var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(fp) {
                                        var destPath, content;
                                        return _regenerator2.default.wrap(function _callee4$(_context4) {
                                            while (1) {
                                                switch (_context4.prev = _context4.next) {
                                                    case 0:
                                                        // 目标存储路径
                                                        destPath = _path2.default.join(tmpDir, _path2.default.relative(dirOptions.base, fp));

                                                        // 原始内容

                                                        content = _fs2.default.readFileSync(fp, 'utf-8');

                                                        // 递归建立目标文件夹

                                                        _context4.next = 4;
                                                        return (0, _tools.exec)('mkdir -p "%s"', _path2.default.dirname(destPath));

                                                    case 4:
                                                        _context4.prev = 4;
                                                        _context4.t0 = _fs2.default;
                                                        _context4.t1 = destPath;
                                                        _context4.next = 9;
                                                        return self.convertContent(content, fp);

                                                    case 9:
                                                        _context4.t2 = _context4.sent;

                                                        _context4.t0.writeFileSync.call(_context4.t0, _context4.t1, _context4.t2);

                                                        _context4.next = 21;
                                                        break;

                                                    case 13:
                                                        _context4.prev = 13;
                                                        _context4.t3 = _context4['catch'](4);

                                                        if (!self.config.force) {
                                                            _context4.next = 20;
                                                            break;
                                                        }

                                                        result[fp] = _context4.t3;
                                                        errorCount++;
                                                        _context4.next = 21;
                                                        break;

                                                    case 20:
                                                        throw _context4.t3;

                                                    case 21:
                                                    case 'end':
                                                        return _context4.stop();
                                                }
                                            }
                                        }, _callee4, _this3, [[4, 13]]);
                                    }));

                                    return function (_x8) {
                                        return _ref5.apply(this, arguments);
                                    };
                                }());

                                _context5.next = 40;
                                return _promise2.default.all(promises);

                            case 40:
                                if (!(processList.length > errorCount)) {
                                    _context5.next = 55;
                                    break;
                                }

                                _context5.next = 43;
                                return (0, _tools.exec)('tar -zcf "%s" -C "%s" .', tmpFile, tmpDir);

                            case 43:
                                _context5.prev = 43;
                                _context5.next = 46;
                                return cassandra.upload(dirOptions.dirHash, tmpFile);

                            case 46:
                                _context5.next = 55;
                                break;

                            case 48:
                                _context5.prev = 48;
                                _context5.t1 = _context5['catch'](43);

                                if (!self.config.force) {
                                    _context5.next = 54;
                                    break;
                                }

                                processList.forEach(function (fp) {
                                    if (!(result[fp] instanceof _QcdnError2.default)) {
                                        result[fp] = _context5.t1;
                                    }
                                });
                                _context5.next = 55;
                                break;

                            case 54:
                                throw _context5.t1;

                            case 55:
                                _context5.next = 57;
                                return (0, _tools.exec)('rm -rf "%s" "%s"', tmpDir, tmpFile);

                            case 57:
                                return _context5.abrupt('return', result);

                            case 58:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this, [[10, 15], [43, 48]]);
            }));

            function uploadToCassandra(_x6, _x7) {
                return _ref4.apply(this, arguments);
            }

            return uploadToCassandra;
        }()

        /**
         * 转换内容
         *
         * @param content {string}
         * @param fp {string}
         * @returns {string}
         */

    }, {
        key: 'convertContent',
        value: function () {
            var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(content, fp) {
                var _this4 = this;

                var ext, matches, dp, url;
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                ext = (0, _tools.extname)(fp);

                                if (content.length) {
                                    _context6.next = 3;
                                    break;
                                }

                                throw new _QcdnError2.default(0x103, '文件为空: ${fp}', {
                                    fp: fp
                                });

                            case 3:
                                if (!(ext == 'css')) {
                                    _context6.next = 32;
                                    break;
                                }

                                content = min.css(content);

                                if (!(content.length == 0)) {
                                    _context6.next = 7;
                                    break;
                                }

                                throw new _QcdnError2.default(0x103, '压缩后文件为空: ${fp}', {
                                    fp: fp
                                });

                            case 7:

                                // 首先检查资源
                                matches = void 0;

                            case 8:
                                if (!(matches = urlReplaceRegex.exec(content))) {
                                    _context6.next = 29;
                                    break;
                                }

                                dp = _path2.default.join(_path2.default.dirname(fp), matches[3]);
                                url = this.replaceMap[dp];

                                // 资源不存在时尝试上传

                                if (url) {
                                    _context6.next = 24;
                                    break;
                                }

                                _context6.prev = 12;
                                _context6.next = 15;
                                return (0, _qcdn2.default)(dp, { single: true });

                            case 15:
                                url = _context6.sent;

                                this.replaceMap[dp] = url;
                                return _context6.abrupt('continue', 8);

                            case 20:
                                _context6.prev = 20;
                                _context6.t0 = _context6['catch'](12);

                            case 22:
                                _context6.next = 26;
                                break;

                            case 24:
                                if (url.startsWith('Error')) {
                                    _context6.next = 26;
                                    break;
                                }

                                return _context6.abrupt('continue', 8);

                            case 26:
                                throw new _QcdnError2.default(0x101, '引用的资源文件缺失: ${resource}, in ${css}', {
                                    css: fp,
                                    resource: dp
                                });

                            case 29:
                                return _context6.abrupt('return', content.replace(urlReplaceRegex, function (full, prefix, _2, rp, suffix) {
                                    var dp = _path2.default.join(_path2.default.dirname(fp), rp);

                                    var url = _this4.replaceMap[dp];

                                    return prefix + url + suffix;
                                }));

                            case 32:
                                if (!(ext == 'js')) {
                                    _context6.next = 39;
                                    break;
                                }

                                content = min.js(content, fp);

                                if (!(content.length == 0)) {
                                    _context6.next = 36;
                                    break;
                                }

                                throw new _QcdnError2.default(0x104, '压缩后文件为空: ${fp}', {
                                    fp: fp
                                });

                            case 36:
                                return _context6.abrupt('return', content);

                            case 39:
                                return _context6.abrupt('return', content);

                            case 40:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this, [[12, 20]]);
            }));

            function convertContent(_x9, _x10) {
                return _ref6.apply(this, arguments);
            }

            return convertContent;
        }()

        /**
         * 生成url
         *
         * @param key {string}
         * @param ext {string}
         * @returns {string}
         */

    }, {
        key: 'buildQStaticUrl',
        value: function buildQStaticUrl(key, ext) {
            var protocol = this.config.https ? 'https' : 'http';
            var domains = this.config.domains[protocol];

            // 根据md5值对域名散列
            var hash = (0, _parseInt2.default)(key.substr(0, 4), 16) % domains.length;

            return protocol + '://' + domains[hash] + '/static/' + key + '.' + ext;
        }

        /**
         * 生成url
         *
         * @param rp {string}
         * @param fpHash {string}
         * @returns {string}
         */

    }, {
        key: 'buildCassandraUrl',
        value: function buildCassandraUrl(rp, fpHash) {
            var protocol = this.config.https ? 'https' : 'http';
            var domains = this.config.domains[protocol];

            // 根据md5值对域名散列
            var hash = (0, _parseInt2.default)((0, _tools.md5)(fpHash + '|' + rp).substr(0, 4), 16) % domains.length;

            return protocol + '://' + domains[hash] + '/!' + fpHash + '/' + rp;
        }

        /**
         * 检查文件名合法性
         *
         * @param fp {string}
         */

    }, {
        key: 'checkFileName',
        value: function checkFileName(fp) {
            if (!fp.match(/^[\w-./]+\.\w+$/i) && this.config.keepName) {
                throw new _QcdnError2.default(0x2, '文件名或文件路径非法: ${fp}', { fp: fp });
            }
        }

        /**
         * 检查文件可读性
         *
         * @param fp
         */

    }, {
        key: 'checkFileReadability',
        value: function checkFileReadability(fp) {
            try {
                _fs2.default.accessSync(fp, _fs2.default.R_OK);
            } catch (e) {
                throw new _QcdnError2.default(0x1, '文件不存在或不可读: ${fp}', { fp: fp });
            }
        }
    }]);
    return StaticUploader;
}();

exports.default = StaticUploader;