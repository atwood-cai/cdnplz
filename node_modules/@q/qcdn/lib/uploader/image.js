'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _parseInt = require('babel-runtime/core-js/number/parse-int');

var _parseInt2 = _interopRequireDefault(_parseInt);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _request = require('../lib/request');

var request = _interopRequireWildcard(_request);

var _QcdnError = require('../lib/QcdnError');

var _QcdnError2 = _interopRequireDefault(_QcdnError);

var _tools = require('../lib/tools');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ImageUploader = function () {

    /**
     * @constructs
     * @param config {object}
     */

    function ImageUploader(config) {
        (0, _classCallCheck3.default)(this, ImageUploader);

        this.config = config;
    }

    /**
     * 获取配置
     *
     * @param key {string}
     * @return {*}
     */


    (0, _createClass3.default)(ImageUploader, [{
        key: 'getConfig',
        value: function getConfig(key) {
            return this.config[key];
        }

        /**
         * 修改配置
         *
         * @param key {string}
         * @param [value] {*}
         */

    }, {
        key: 'setConfig',
        value: function setConfig(key, value) {
            this.config[key] = value;
        }

        /**
         * 上传文件
         *
         * @param fps {string[]}
         * @param [dirOptions] {object}
         * @returns {object}
         */

    }, {
        key: 'upload',
        value: function upload(fps, dirOptions) {
            var _this = this;

            fps = fps.filter(function (fp) {
                return (0, _tools.includes)(_this.config.exts, (0, _tools.extname)(fp));
            });

            return this.doUpload(fps, dirOptions);
        }

        /**
         * 执行上传
         *
         * @param fps {string[]}
         * @param [dirOptions] {object}
         * @returns {object}
         */

    }, {
        key: 'doUpload',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(fps, dirOptions) {
                var promises, lastDirname, sliceStart, sliceEnd, dirname, packageFps, promise, result;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                promises = [];

                                // 按文件所在文件夹进行排序,排序后相同文件夹的文件会在一起

                                fps = fps.sort(function (a, b) {
                                    return _path2.default.dirname(a) > _path2.default.dirname(b) ? 1 : -1;
                                });

                                lastDirname = null;


                                for (sliceStart = 0, sliceEnd = 1; sliceEnd <= fps.length; sliceEnd++) {
                                    dirname = sliceEnd == fps.length ? null : _path2.default.dirname(fps[sliceEnd]);

                                    // 对文件进行分组上传
                                    // 每个分组仅包含相同文件夹下的文件,且文件数量不超过packageSize

                                    if (lastDirname && dirname != lastDirname || sliceEnd - sliceStart >= this.config.packageSize || sliceEnd == fps.length) {
                                        packageFps = fps.slice(sliceStart, sliceEnd);
                                        promise = this.doUploadPackage(packageFps, dirOptions);

                                        promises.push(promise);

                                        sliceStart = sliceEnd;
                                    }

                                    lastDirname = dirname;
                                }

                                _context.next = 6;
                                return _promise2.default.all(promises);

                            case 6:
                                result = _context.sent;


                                result = _assign2.default.apply(Object, [{}].concat((0, _toConsumableArray3.default)(result)));

                                if (this.config.https) {
                                    this.cacheFiles(result);
                                }

                                return _context.abrupt('return', result);

                            case 10:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function doUpload(_x, _x2) {
                return _ref.apply(this, arguments);
            }

            return doUpload;
        }()

        /**
         * 上传分片
         *
         * @param fps {string[]}
         * @param [dirOptions] {object}
         * @returns {object}
         */

    }, {
        key: 'doUploadPackage',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(fps, dirOptions) {
                var _this2 = this;

                var result, stream, rps, i, fp, data, response, _ret3;

                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                result = {};
                                stream = {};
                                rps = void 0;

                                // 计算为相对路径

                                if (dirOptions) {
                                    (function () {
                                        var cutLength = dirOptions.base.length + (dirOptions.base.endsWith('/') ? 0 : 1);

                                        rps = fps.map(function (fp) {
                                            return fp == dirOptions.base ? _path2.default.basename(fp) : fp.substr(cutLength);
                                        });
                                    })();
                                }

                                // 检查文件
                                i = 0;

                            case 5:
                                if (!(i < fps.length)) {
                                    _context2.next = 23;
                                    break;
                                }

                                fp = fps[i];
                                _context2.prev = 7;

                                this.checkFileReadability(fp);

                                // 文件夹模式需要检查文件名
                                dirOptions && this.checkFileName(rps[i]);
                                _context2.next = 20;
                                break;

                            case 12:
                                _context2.prev = 12;
                                _context2.t0 = _context2['catch'](7);

                                if (!this.config.force) {
                                    _context2.next = 19;
                                    break;
                                }

                                result[fp] = _context2.t0;
                                fps.splice(i--, 1);
                                _context2.next = 20;
                                break;

                            case 19:
                                throw _context2.t0;

                            case 20:
                                i++;
                                _context2.next = 5;
                                break;

                            case 23:

                                fps.forEach(function (fp, index) {
                                    var content = _fs2.default.readFileSync(fp, 'binary');
                                    stream[index] = (0, _tools.urlencode)(content);
                                });

                                data = {
                                    EFFECTIVE: 1,
                                    RULES: {
                                        optimize: []
                                    },
                                    IMGSTREAM: stream
                                };

                                // 文件夹模式自定义URL

                                if (dirOptions) {
                                    (function () {
                                        var urls = {};

                                        rps.forEach(function (rp, index) {
                                            return urls[index] = _path2.default.join('inn', dirOptions.dirHash, rp);
                                        });

                                        data.RULES.diyurl = [{
                                            PICARULE_DIYURL_MULTI: {
                                                URL: urls
                                            }
                                        }];
                                    })();
                                }

                                data.SIGN = this.genSign(data);

                                response = void 0;
                                _context2.prev = 28;
                                _context2.next = 31;
                                return request.post(this.config.api.sync, data);

                            case 31:
                                response = _context2.sent;
                                _context2.next = 39;
                                break;

                            case 34:
                                _context2.prev = 34;
                                _context2.t1 = _context2['catch'](28);

                                _ret3 = function () {
                                    var error = new _QcdnError2.default(0x211, '图床网络错误: ${message}', {
                                        fp: fps,
                                        message: _context2.t1.message
                                    });

                                    if (_this2.config.force) {
                                        fps.forEach(function (fp) {
                                            result[fp] = error;
                                        });
                                        return {
                                            v: fps
                                        };
                                    } else {
                                        throw error;
                                    }
                                }();

                                if (!((typeof _ret3 === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret3)) === "object")) {
                                    _context2.next = 39;
                                    break;
                                }

                                return _context2.abrupt('return', _ret3.v);

                            case 39:

                                fps.forEach(function (fp, index) {
                                    var data = response[index];

                                    if (data && data.ERRORMSG == 'success') {
                                        var url = (data.DATA.diyurl || data.DATA.optimize).URL[0];
                                        result[fp] = _this2.convertUrl(url);
                                    } else {
                                        var _error = new _QcdnError2.default(0x221, '图床返回错误: ${message}', {
                                            fp: fp,
                                            message: data ? data.ERRORMSG : '图床未返回结果'
                                        });

                                        if (_this2.config.force) {
                                            result[fp] = _error;
                                        } else {
                                            throw _error;
                                        }
                                    }
                                });

                                return _context2.abrupt('return', result);

                            case 41:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this, [[7, 12], [28, 34]]);
            }));

            function doUploadPackage(_x3, _x4) {
                return _ref2.apply(this, arguments);
            }

            return doUploadPackage;
        }()

        /**
        * 计算签名
        * @param data
        */

    }, {
        key: 'genSign',
        value: function genSign(data) {
            var params = [(0, _stringify2.default)(data.IMGSTREAM), (0, _stringify2.default)(data.RULES), this.config.token, this.config.secret, '360IMG'];
            return (0, _tools.md5)(params.join('|'));
        }

        /**
         * 转换url
         *
         * @param url {string}
         * @returns {string}
         */

    }, {
        key: 'convertUrl',
        value: function convertUrl(url) {
            // 除去"http://p0.qhimg.com"的部分
            var fp = url.substr(19);

            var protocol = this.config.https ? 'https' : 'http';
            var domains = this.config.domains[protocol];

            // 根据md5值对域名散列
            var hash = (0, _parseInt2.default)((0, _tools.md5)(fp).substr(0, 4), 16) % domains.length;

            return protocol + '://' + domains[hash] + fp;
        }

        /**
         * 检查文件名合法性
         *
         * @param fp {string}
         */

    }, {
        key: 'checkFileName',
        value: function checkFileName(fp) {
            if (!fp.match(/^[\w-./]+\.\w+$/i) && this.getConfig('keepName')) {
                throw new _QcdnError2.default(0x2, '文件名或文件路径非法: ${fp}', { fp: fp });
            }
        }

        /**
         * 检查文件可读性
         *
         * @param fp {string}
         */

    }, {
        key: 'checkFileReadability',
        value: function checkFileReadability(fp) {
            try {
                _fs2.default.accessSync(fp, _fs2.default.R_OK);
            } catch (e) {
                throw new _QcdnError2.default(0x1, '文件不存在或不可读: ${fp}', { fp: fp });
            }
        }

        /**
         * 使服务器生成文件缓存
         *
         * @param result
         */

    }, {
        key: 'cacheFiles',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(result) {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                (0, _keys2.default)(result).forEach(function (key) {
                                    var url = result[key].replace(/https:\/\/p\d+\.ssl/, 'http://p0');
                                    request.get(url);
                                });
                                _context3.next = 3;
                                return new _promise2.default(function (resolve) {
                                    return setTimeout(resolve, 1000);
                                });

                            case 3:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function cacheFiles(_x5) {
                return _ref3.apply(this, arguments);
            }

            return cacheFiles;
        }()
    }]);
    return ImageUploader;
}(); /**
      * @fileOverview 上传图床
      * @author 孟之杰(mengzhijie@360.cn)
      * @version 3.0.0
      */

exports.default = ImageUploader;